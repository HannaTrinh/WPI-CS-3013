In part 1, in our map function, we check if the page table exists and the page is already mapped, if the read/write bit needs to be changed, we change it. If the page is not mapped and there is a free space, we map the page (if the page's page table is on disk, we would swap it in to physical memory, but as is explained in part 2 below, we couldn't figure out how to code page table swapping). In our store function, we check if the page is writable and if it's in physical memory. If it is, we put the given value into the given virtual address. In our load function, we return the value at the given virtual address.

For part 2 we had a problem with implementing the swap code for page tables. We understand how swapping should work and what should be swapped in when. We know that when swapping a page in or out, the page table that's associated with the page needs to be in physical memory. However, we were not able to fully put that into code. We were able to swap pages in and out when the pages' page table was already in physical memory, but we couldn't figure out how to do the same with a page table.

We have our written pseudo code that we couldn't figure out how to code, commented out in our main file.